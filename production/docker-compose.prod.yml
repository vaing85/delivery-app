version: '3.8'

services:
  # PostgreSQL - Production database
  postgres:
    image: postgres:15-alpine
    container_name: delivery-app-postgres-prod
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-delivery_app_prod}
      - POSTGRES_USER=${POSTGRES_USER:-delivery_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./postgres/backup:/backup
    ports:
      - "5432:5432"
    networks:
      - delivery-app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-delivery_user} -d ${POSTGRES_DB:-delivery_app_prod}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis - Caching and session storage
  redis:
    image: redis:7-alpine
    container_name: delivery-app-redis-prod
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - delivery-app-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend - Production backend service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: delivery-app-backend-prod
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER:-delivery_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-delivery_app_prod}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      - PORT=5000
      - CORS_ORIGIN=${CORS_ORIGIN:-https://deliveryapp.com}
      - FRONTEND_URL=${FRONTEND_URL:-https://deliveryapp.com}
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/logs:/app/logs
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - delivery-app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend - Production frontend service
  frontend:
    build:
      context: ./web-portal
      dockerfile: Dockerfile.prod
    container_name: delivery-app-frontend-prod
    restart: unless-stopped
    environment:
      - VITE_API_URL=${VITE_API_URL:-https://api.deliveryapp.com}
    ports:
      - "3000:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - delivery-app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx - Reverse proxy and load balancer
  nginx:
    image: nginx:alpine
    container_name: delivery-app-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - backend
      - frontend
    networks:
      - delivery-app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backup service
  backup:
    image: postgres:15-alpine
    container_name: delivery-app-backup-prod
    restart: "no"
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-delivery_app_prod}
      - POSTGRES_USER=${POSTGRES_USER:-delivery_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=postgres
    volumes:
      - ./postgres/backup:/backup
    command: |
      sh -c "
        while true; do
          pg_dump -h postgres -U ${POSTGRES_USER:-delivery_user} -d ${POSTGRES_DB:-delivery_app_prod} > /backup/backup-$(date +%Y%m%d_%H%M%S).sql
          find /backup -name 'backup-*.sql' -mtime +7 -delete
          sleep 86400
        done
      "
    depends_on:
      - postgres
    networks:
      - delivery-app-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  delivery-app-network:
    driver: bridge
