version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: delivery-app-postgres
    environment:
      POSTGRES_DB: delivery_app_prod
      POSTGRES_USER: delivery_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/prisma/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - delivery-network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: delivery-app-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - delivery-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: delivery-app-backend
    environment:
      NODE_ENV: production
      PORT: 5000
      DATABASE_URL: postgresql://delivery_user:${POSTGRES_PASSWORD}@postgres:5432/delivery_app_prod
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      FRONTEND_URL: ${FRONTEND_URL}
      CORS_ORIGIN: ${CORS_ORIGIN}
    ports:
      - "5000:5000"
    depends_on:
      - postgres
      - redis
    networks:
      - delivery-network
    restart: unless-stopped
    volumes:
      - ./backend/uploads:/app/uploads

  # Web Portal
  web-portal:
    build:
      context: ./web-portal
      dockerfile: Dockerfile.prod
    container_name: delivery-app-web
    environment:
      VITE_API_URL: ${VITE_API_URL}
      VITE_GOOGLE_MAPS_API_KEY: ${VITE_GOOGLE_MAPS_API_KEY}
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - delivery-network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: delivery-app-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - web-portal
    networks:
      - delivery-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  delivery-network:
    driver: bridge
