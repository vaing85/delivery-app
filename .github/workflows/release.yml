name: Release

# Required secrets for this workflow:
# - DOCKER_USERNAME: Docker Hub username
# - DOCKER_PASSWORD: Docker Hub password or access token
# - SLACK_WEBHOOK: Slack webhook URL for notifications (optional)
# - DISCORD_WEBHOOK: Discord webhook URL for notifications (optional)

on:
  push:
    tags:
      - 'v*'

env:
  NODE_VERSION: '18'

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd backend && npm ci
          cd ../web-portal && npm ci

      - name: Build application
        run: |
          cd backend && npm run build
          cd ../web-portal && npm run build

      - name: Generate changelog
        id: changelog
        run: |
          echo "## What's Changed" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/$(git describe --tags --abbrev=0 HEAD^)...${{ github.ref_name }}" >> CHANGELOG.md

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: false

  build-docker-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Validate Docker credentials
        run: |
          if [ -z "$DOCKER_USERNAME" ]; then
            echo "Error: DOCKER_USERNAME secret is not set"
            echo "Please add DOCKER_USERNAME to your repository secrets"
            exit 1
          fi
          if [ -z "$DOCKER_PASSWORD" ]; then
            echo "Error: DOCKER_PASSWORD secret is not set"
            echo "Please add DOCKER_PASSWORD to your repository secrets"
            exit 1
          fi
          echo "Docker credentials are available"
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile.prod
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/delivery-app-backend:${{ github.ref_name }}
            ${{ secrets.DOCKER_USERNAME }}/delivery-app-backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./web-portal
          file: ./web-portal/Dockerfile.prod
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/delivery-app-frontend:${{ github.ref_name }}
            ${{ secrets.DOCKER_USERNAME }}/delivery-app-frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [create-release, build-docker-images]
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "Deploying version ${{ github.ref_name }} to production..."
          # Add your production deployment commands here
          # Example: Update docker-compose.yml with new image tags
          # Example: Deploy to your cloud provider

      - name: Run health checks
        run: |
          echo "Running health checks..."
          # Add health check commands here
          # Example: curl -f https://api.deliveryapp.com/health

  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [create-release, build-docker-images, deploy-production]
    if: always()
    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#releases'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        if: always()

      - name: Notify Discord
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        with:
          args: 'ðŸš€ **New Release**: ${{ github.ref_name }} has been deployed to production!'
        if: always()
